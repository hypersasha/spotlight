{"version":3,"sources":["img/persik.png","component/Spotcard.js","panels/Home.js","panels/Persik.js","App.js","index.js"],"names":["module","exports","Spotcard","className","before","src","size","asideContent","Home","id","go","fetchedUser","osName","platform","Persik","props","left","onClick","data-to","IOS","persik","alt","App","useState","activePanel","setActivePanel","setUser","useEffect","a","connect","sendPromise","user","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","send","ReactDOM","render","getElementById"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,oC,0mBC4B5BC,G,OAnBE,kBACb,kBAAC,IAAD,KACI,yBAAKC,UAAW,sBACZ,yBAAKA,UAAW,kBACZ,yBAAKA,UAAW,wBAChB,yBAAKA,UAAW,kBAAhB,mEAEJ,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CACIC,OAAQ,kBAAC,IAAD,CAAQC,IAAK,sEAAuEC,KAAM,KAClGC,aAAc,kBAAC,IAAD,4EACd,uBAAGJ,UAAW,uBAAd,gBACA,uBAAGA,UAAW,mCAAd,kC,QCQLK,EArBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAH,EAAOC,GAAP,EAAWC,YAAX,OACZ,kBAAC,IAAD,CAAOF,GAAIA,GACV,kBAAC,IAAD,kBACA,kBAAC,EAAD,MACA,kBAAC,IAAD,uZ,sECAIG,G,OAASC,eAoBAC,EAlBA,SAAAC,GAAK,OACnB,kBAAC,IAAD,CAAON,GAAIM,EAAMN,IAChB,kBAAC,IAAD,CACCO,KAAM,kBAAC,IAAD,CAAcC,QAASF,EAAML,GAAIQ,UAAQ,QAC7CN,IAAWO,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAF3C,UAOA,yBAAKhB,UAAU,SAASE,IAAKe,IAAQC,IAAI,qBCkB5BC,EAjCH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,KACGC,EADH,OAEcF,mBAAS,MAFvB,mBAEVZ,EAFU,KAEGe,EAFH,KAKjBC,qBAAU,WAAM,4CASf,4BAAAC,EAAA,sEACoBC,IAAQC,YAAY,uBADxC,OACOC,EADP,OAECL,EAAQK,GAFT,4CATe,sBACfF,IAAQG,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAkB,EAAZC,KACpC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQ,cAExBF,SAASG,KAAKC,WAAWC,aAAaN,OANzB,mCAafO,KACE,IAEH,IAAMjC,EAAK,SAAAkC,GACVnB,EAAemB,EAAEC,cAAcC,QAAQC,KAGxC,OACC,kBAAC,IAAD,CAAMvB,YAAaA,GAClB,kBAAC,EAAD,CAAMf,GAAG,OAAOE,YAAaA,EAAaD,GAAIA,IAC9C,kBAAC,EAAD,CAAQD,GAAG,SAASC,GAAIA,MC3B3BmB,IAAQmB,KAAK,gBAQbC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,W","file":"static/js/main.0c568a2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";","import React from 'react';\n\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\n\nimport './spotcard.css';\n\nconst Spotcard = () => (\n    <Div>\n        <div className={'spotcard-container'}>\n            <div className={'spotcard-cover'}>\n                <div className={'spotcard-cover-dark'}></div>\n                <div className={'spotcard-title'}>Рядом с Вами</div>\n            </div>\n            <div className='spotcard-inforow'>\n                <Cell \n                    before={<Avatar src={\"https://image-ticketfly.imgix.net/00/03/20/63/52-og.jpg?w=300&h=300\"} size={42} />}\n                    asideContent={<Button>Засветиться</Button>}>\n                    <p className={'spotcard-info-title'}>Tessa Violet</p>\n                    <p className={'spotcard-info-title description'}>I like (the idea of) You</p>\n                </Cell>\n            </div>    \n        </div>\n    </Div>\n);\n\nexport default Spotcard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\n\nimport Spotcard from '../component/Spotcard';\nimport { Footer } from '@vkontakte/vkui';\n\nconst Home = ({ id, go, fetchedUser }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Spotlight</PanelHeader>\n\t\t<Spotcard />\n\t\t<Footer>Нажмите «Засветиться», чтобы синхронизировать Ваш фонарик с другими людьми.</Footer>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</HeaderButton>}\n\t\t>\n\t\t\tPersik\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\t//const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = 'client_dark';\n\t\t\t\t// data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.sendPromise('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t<Persik id='persik' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}